swagger: 2
info:
  title: UserGrId API
  description:  "UserGrId API"
  version: 1.0.0
host: api.usergrId.com
schemes:
  - https
basePath: /
produces:
  - application/json
paths:
  management/users:
    post:
      summary: "Creating an admin user"
      description: "Use the POST method to create an admin user."
      parameters:
        - name: adminuserproperty
          in: body
          description: "One or more sets of user properties of which username is mandatory and must be unique"
          required: true
          schema:
            $ref: Admin User Property
      tags:
        - User Info
      responses:
        "200":
          description: "An array of new created Admin user's info"
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  management/users/{userId}:     
    put:
      summary: "Updating an admin user"
      description: "Use the PUT method to update an admin user."
      parameters: 
        - $ref: "#/parameters/userId"
      tags:
        - User Info
      responses:
        "200":
          description: "An array of user's details"
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
    get:
      summary: "Getting an admin user"
      description: "Use the GET method to retrieve details about an admin user."
      parameters:
        - $ref: "#/parameters/userId"
      tags:
        - User Info
      responses:
        "200":
          description: "An array of user's details"
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  management/users/resetpw:
    post:
      summary: "Completing a password reset"
      description: "Use the POST method to complete the password reset."
      parameters:
        - name: ResetPW Complete Msg
          in: body
          description: "Parameters and value for the Captcha challenge, the admin user's response to the Captcha challenge, and the admin user's email address."
          required: true
          schema: 
            ref: ResetPW Complete Msg
      tags:
        - Action Response Info
      responses:
        "200":
          description: "An array of complete messages"
          schema:
            $ref: Action Response Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
    get:
      summary: "Initiating a password reset"
      description: "Use the GET method to initiate the password reset."
      tags:
        - Action Response Info
      responses:
        "200":
          description: "An array of complete messages"
          schema:
            $ref: Action Response Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  management/users/{userId}/password:
    put:
      summary: "Setting an admin user's password"
      description: "Use the PUT method to update an admin user's password."
      parameters:
        - $ref: "#/parameters/userId"
        - name: ResetPW
          in: body
          description: "the user's old and new password"
          required: true
          schema:
            $ref: ResetPW
      tags:
        - Action Response Info
      responses:
        "200":
          description: "An array of complete messages"
          schema:
            $ref: Action Response Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  management/users/{userId}/activate:
    get:
      summary: "Activating an admin user"
      description: "Use the GET method to activate an admin user from a link provIded in an email notification. The complete request URL should be GET /management/organizations/{org}/users/{user|username|email|uuId}/activate?token={token}&confirm={confirm_email}."
      parameters:
        - $ref: "#/parameters/userId"
        - name: token
          in: query
          description: "activation token's query statement"
          required: true
          type: string
        - name: confirm_email
          in: query
          description: "query statement of whether send confimation email or not"
          required: true
          type: boolean
      tags:
        - Action Response Info
      responses:
        "200":
          description: "An array of complete messages"
          schema:
            $ref: Action Response Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  management/users/{userId}/reactivate:
    get:
      summary: "Reactivating an admin user"
      description: "Use the GET method to reactivate an admin user."
      parameters:
        - $ref: "#/parameters/userId"
      tags:
        - Action Response Info
      responses:
        "200":
          description: "An array of complete messages"
          schema:
            $ref: Action Response Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  management/users/{userId}/feed:
    get:
      summary: "Getting an admin user's activity feed"
      description: "Use the GET method to retrieve an admin user's activity feed."
      parameters:
        - $ref: "#/parameters/userId"
      tags:
        - Activity Feed
      responses:
        "200":
          description: "An array of user's activity"
          schema:
            $ref: Activity Feed
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/users/{userId}/activities":
    post:
      summary: "Posting a user activity"
      description: "Use the  POST method to create an activity in the activities collection."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"
        - $ref: "#/parameters/userId-3"
        - name: Activity Property
          in: body
          description: "One or more sets of activity properties"
          required: true
          schema:
            $ref: Activity Property
      tags:
        - Activity Feed
      responses:
        "200":
          description: "An array of user's activity"
          schema:
            $ref: Activity Feed
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/groups/{groupId}/activities":
    post:
      summary: "Posting an activity to a group"
      description: "Use the POST method to post an activity to a specific group. In this case the activity is created in the activities collection and is accessible at the /activities endpoint to users who have the permission to read that endpoint. In addition, a relationship is established between the activity and the group, and because of that, the activity will appear in the groupâ€™s feed. The group 'owns' the activity. Also, the activity will be published in the feed of all users that are members of the group."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"
        - $ref: "#/parameters/groupId" 
        - name: Activity Property
          in: body
          description:  "One or more sets of activity properties"
          required: true
          schema:
            $ref: Activity Property
      tags:
        - Activity Feed
      responses:
        "200":
          description:  "An array of user's activity"
          schema:
            $ref: Activity Feed
        default:
          description:  "Unexpected error"
          schema:
            $ref: Error 
  management/orgs:
    post:
      summary: "Creating an orgnization"
      description: "Use the POST method to create an orgnization through a form post."
      parameters:
        - name: orgnization Property
          in: body
          description: "A set of orgnization properties supplied through a form."
          required: true
          schema:
            $ref: orgnization Property
      tags:
        - orgnization Info
      responses:
        "200":
          description: "An array of created orgnization info"
          schema:
            $ref: orgnization Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  management/orgs/{orgId}:
    get:
      summary: "Getting an orgnization"
      description: "Use the GET method to retrieve an orgnization given a specified UUId or username."
      parameters:
        - $ref: "#/parameters/orgId"
      tags:
        - orgnization Info
      responses:
        "200":
          description: "An array of created orgnization info"
          schema:
            $ref: orgnization Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  management/orgs/{orgId}/activate:
    get:
      summary: "Activating an orgnization"
      description: "Use the GET method to activate an orgnization from a link provIded in an email notification. The complete request URL is 'GET /orgs/{org_name}|{uuId}/activate?token={token}&confirm={confirm_email}'"
      parameters:
        - $ref: "#/parameters/orgId"
        - name: token
          in: query
          description: "Activation token"
          required: true
          type: string          
        - name: confirm_email
          in: query
          description: "Send confirmation email"
          required: true
          type: boolean  
      tags:
        - Action Response Info
      responses:
        "200":
          description: "An array of complete messages"
          schema:
            $ref: Action Response Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error   
  management/orgs/{orgId}/reactivate:    
    get:
      summary: "Reactivating an orgnization"
      description: "Use the GET method to reactivate an orgnization."
      parameters:   
        - $ref: "#/parameters/orgId"
      tags:
        - Action Response Info
      responses:
        "200":
          description: "An array of complete messages"
          schema:
            $ref: Action Response Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  management/orgs/{orgId}/credentials:
    post:
      summary: "Generating orgnization client credentials"
      description: "Use the POST method to generate new credentials for an orgnization client."
      parameters:
        - $ref: "#/parameters/orgId"
      tags:
        - Credential Info
      responses:
        "200":
          description: "An array of credential info"
          schema:
            $ref: Credential Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
    get:
      summary: "Retrieving orgnization client credentials"
      description: "Use the GET method to retrieve the credentials for an orgnization client."
      parameters:
        - $ref: "#/parameters/orgId"
      tags:
        - Credential Info
      responses:
        "200":
          description: "An array of credential info"
          schema:
            $ref: Credential Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  management/orgs/{orgId}/feed:
    get:
      summary: "Getting an orgnization's activity feed"
      description: "Use the GET method to get an orgnization's activity feed.         "
      parameters:
        - $ref: "#/parameters/orgId"
      tags:
        - Activity Feed
      responses:
        "200":
          description: "An array of the orgnization's Activity Feed"
          schema:
            $ref: Activity Feed
        default:
          description: "Unexpected error"
          schema:
            $ref: Error   
  management/orgs/{orgId}/apps:
    post:
      summary: "Creating an orgnization application"
      description: "Use the POST method to create an application for an orgnization through a form post."
      parameters:   
        - $ref: "#/parameters/orgId"
        - name: Application Property
          in: body
          description: "A set of orgnization properties supplied through a form."
          required: true
          schema:
            $ref: Application Property   
      tags:
        - Action Response Info
      responses:
        "200":
          description: "An array of complete messages"
          schema:
            $ref: Action Response Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  management/orgs/{orgId}/apps/{appId}:
    delete:
      summary: "Removing an application from the orgnization"
      description: "Use the DELETE method to remove an application from an orgnization."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"
      tags:
        - Application Data
      responses:
        "200":
          description: "An array of deleted application info."
          schema:
            $ref: Application Data
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  management/orgs/{orgId}/apps/{appId}/credentials:
    post:
      summary: "Generating application credentials"
      description: "Use the POST method to generate the client Id and client secret credentials for an application in an orgnization."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"
      tags:
        - Credential Info
      responses:
        "200":
          description: "An array of generated credentials info."
          schema:
            $ref: Credential Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
    get:
      summary: "Getting application credentials"
      description: "Use the GET method to retrieve the client Id and client secret credentials for an application in an orgnization."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"
      tags:
        - Credential Info
      responses:
        "200":
          description: "An array of retrieved credentials info."
          schema:
            $ref: Credential Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  management/orgs/{orgId}/apps:
    get:
      summary: "Getting the applications in an orgnization"
      description: "Use the GET method to retrieve the applications in an orgnization."
      parameters:
        - $ref: "#/parameters/orgId"
      tags:
        - Application Data
      responses:
        "200":
          description: "An array of retrieved application data."
          schema:
            $ref: Application Data
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  management/orgs/{orgId}/users/{userId}:
    put:
      summary: "Adding an admin user to an orgnization"
      description: "Use the PUT method to add an existing admin user to an orgnization."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/userId-2"     
      tags:
        - User Info
      responses:
        "200":
          description: "An array of new added Admin user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  management/orgs/{orgId}/users:
    get:
      summary: "Getting the admin users in an orgnization"
      description: "Use the GET method to retrieve details about the admin users in an orgnization."
      parameters:
        - $ref: "#/parameters/orgId"
      tags:
        - User Info
      responses:
        "200":
          description: "An array of retrieved Admin user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  management/orgs/{orgId}/users/{userId}:
    delete:
      summary: "Removing an admin user from an orgnization"
      description: "Use the DELETE method to remove an admin user from an orgnization."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/userId-2" 
      tags:
        - User Info
      responses:
        "200":
          description: "An array of deleted Admin user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error

  "/{orgId}/{appId}/{collectionId}":
    get:
      summary: "Retrieving sets of entities from a collection"
      description: "Use the GET method to retrieve a set of entities from a collection."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"
        - $ref: "#/parameters/collectionId"
      tags:
        - Entity Info
      responses:
        "200":
          description: "An array of retrieved collection's info."
          schema:
            $ref: Entity Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  "/{orgId}/{appId}/{entitytype}":
    post:
      summary: "Creating a custom entity"
      description: "When a new entity is created, API Services will automatically create a corresponding collection if one does not already exist. The collection will automatically be named with the plural form of the entity type. "
      parameters: 
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"  
        - name: entitytype
          in: path
          description: "the entity type to create"
          required: true
          type: string
        - name: entityproperty
          in: body
          description: "the properties of the entity"
          required: true
          schema:
            $ref: Entity Properties  
      tags:
        - Entity Info
      responses:
        "200":
          description: "An array of created custom entity's info."
          schema:
            $ref: Entity Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/{collectionId}/{entityId}":
    get:
      summary: "Retrieving an entity"
      description: "Use the GET method to retrieve an entity."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"  
        - $ref: "#/parameters/collectionId"
        - $ref: "#/parameters/entityId"  
      tags:
        - Entity Info
      responses:
        "200":
          description: "An array of retrieved entity's info."
          schema:
            $ref: Entity Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
    put:
      summary: "Updating an entity"
      description: "One or more properties can be updated with a single PUT request."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"  
        - $ref: "#/parameters/collectionId"
        - $ref: "#/parameters/entityId" 
        - name: entityproperty
          in: body
          description: "the properties of the entity"
          required: true
          schema:
            $ref: Entity Properties 
      tags:
        - Entity Info
      responses:
        "200":
          description: "An array of updated entity's info."
          schema:
            $ref: Entity Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error         
    delete:
      summary: "Deleting an entity"
      description: "Use the DELETE method to delete an entity."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"  
        - $ref: "#/parameters/collectionId"
        - $ref: "#/parameters/entityId" 
      tags:
        - Entity Info
      responses:
        "200":
          description: "An array of deleted entity's info."
          schema:
            $ref: Entity Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error   
  "/{orgId}/{appId}/{collectionId}":
    get:
      summary: "Query a collection"
      description: "Use the GET method to retrieve collection through query statement."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"  
        - $ref: "#/parameters/collectionId"
        - name: queryStatement
          in: query
          description: "Any values specified in the query statement should be enclosed in single-quotes."
          required: true
          type: string
      tags:
        - Entity Info
      responses:
        "200":
          description: "An array of retrieved collection's info."
          schema:
            $ref: Entity Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
    put:
      summary: "Update a collection by query"
      description: "Use the PUT method to update collection through query statement."
      parameters: 
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"  
        - $ref: "#/parameters/collectionId"
        - name: queryStatement
          in: query
          description: "Any values specified in the query statement should be enclosed in single-quotes."
          required: true
          type: string
      tags:
        - Entity Info
      responses:
        "200":
          description: "An array of updated collection's info."
          schema:
            $ref: Entity Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/{collectionId}/{entityId1}/{relation}/{entityId2}":
    post:
      summary: "Add an entity to a collection or create a connection"
      description: "Use the POST method to add an entity to a collection or create a connection"
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"  
        - $ref: "#/parameters/collectionId"    
        - name: entityId1
          in: path
          description: "the Id of the 1st entity."
          required: true
          type: string 
        - name: relation
          in: path
          description: "the relation between 1st entity and 2nd entity."
          required: true
          type: string 
        - name: entityId2
          in: path
          description: "the Id of the 2nd entity."
          required: true
          type: string
      tags:
        - Entity Info
      responses:
        "200":
          description: "An array of added entity's info."
          schema:
            $ref: Entity Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
    delete:
      summary: "Remove an entity from a collection or delete a connection"
      description: "Use the DELETE method to remove an entity from a collection or delete a connection"
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"  
        - $ref: "#/parameters/collectionId"     
        - name: entityId1
          in: path
          description: "the Id of the 1st entity."
          required: true
          type: string 
        - name: relation
          in: path
          description: "the relation between 1st entity and 2nd entity."
          required: true
          type: string 
        - name: entityId2
          in: path
          description: "the Id of the 2nd entity."
          required: true
          type: string
      tags:
        - Entity Info
      responses:
        "200":
          description: "An array of deleted entity's info."
          schema:
            $ref: Entity Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/events":
    post:
      summary: "Create an event"
      description: "Use the POST method to create an event"
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"  
        - name: eventproperty
          in: body
          description: "the required property of the event"
          required: true
          schema:
            $ref: Event Property        
      tags:
        - Event Info
      responses:
        "200":
          description: "An array of created event's info."
          schema:
            $ref: Event Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error  
  "/{orgId}/{appId}/groups":
    post:
      summary: "Create a new group"
      description: "Use the POST method to create a new group"
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"  
        - name: groupproperty
          in: body
          description: "the property of the created group"
          required: true
          schema:
            $ref: Group Property
      tags:
        - Group Info
      responses:
        "200":
          description: "An array of created group's info."
          schema:
            $ref: Group Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error  
  "/{orgId}/{appId}/groups/{groupId}/users/{userId}":
    post:
      summary: "Add a user to a group"
      description: "Use the POST method to add a user to a group."
      parameters:        
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/groupId"
        - $ref: "#/parameters/userId-3" 
      tags:
        - User Info
      responses:
        "200":
          description: "An array of added user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error  
    delete:
      summary: "Delete user from a group"
      description: "Use the DELETE method to delete user from a group."
      parameters:   
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/groupId"
        - $ref: "#/parameters/userId-3" 
      tags:
        - User Info
      responses:
        "200":
          description: "An array of deleted user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{org_Id}/{app_Id}/groups/{groupId}":
    get:
      summary: "Get a group"
      description: "Use the GET method to get a group."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/groupId"
      tags:
        - Group Info
      responses:
        "200":
          description: "An array of retrieved group's info."
          schema:
            $ref: Group Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
    put:
      summary: "Update a group"
      description: "Use the PUT method to update a group."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/groupId"
      tags:
        - Group Info
      responses:
        "200":
          description: "An array of updated group's info."
          schema:
            $ref: Group Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/groups/{groupId}/feed":
    get: 
      summary: "Get a group's feed"
      description: "Use the GET method to get a group's feed."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/groupId" 
      tags:
        - Activity Feed
      responses:
        "200":
          description: "An array of group's activity"
          schema:
            $ref: Activity Feed
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/roles":
    post:
      summary: "Create a new role"
      description: "Use the POST method to create a new role."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - name: roleproperty
          in: body
          description: "the required properties of the role"
          required: true
          schema:
            $ref: Role Property      
      tags:
        - Role Info
      responses:
        "200":
          description: "An array of created role's info."
          schema:
            $ref: Role Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
    get:
      summary: "Get the roles in an application"
      description: "Use the GET method to get the roles in an application."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
      tags:
        - Role Info
      responses:
        "200":
          description: "An array of retrieved role's info."
          schema:
            $ref: Role Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error  
  "/{orgId}/{appId}/roles/{rolename}":
    delete:
      summary: "Delete a role"
      description: "Use the DELETE method to delete a role."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - name: rolename
          in: path
          description: "the name of the role"
          required: true
          type: string
      tags:
        - Role Info
      responses:
        "200":
          description: "An array of deleted role's info."
          schema:
            $ref: Role Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error  
  "/{orgId}/{appId}/roles/{roleId}/permissions":
    post:
      summary: "Add permissions to a role"
      description: "Use the POST method to add permissions to a role."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/roleId"
        - name: permissionproperty
          in: body
          description: "the properties of permissions"
          required: true
          schema:
            $ref: Permission Property
      tags:
        - Permission Info
      responses:
        "200":
          description: "An array of created permission's info."
          schema:
            $ref: Permission Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
    get:
      summary: "Get permissions for a role"
      description: "Use the GET method to get permissions for a role."
      parameters: 
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/roleId"
      tags:
        - Permission Info
      responses:
        "200":
          description: "An array of retrieved permission's info."
          schema:
            $ref: Permission Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error  
  "/{orgId}/{appId}/roles/{roleId}/permissions":
    delete:
      summary:  "Delete permissions from a role"
      description:  "Use the DELETE method to delete permissions from a role. The complete request URL is 'DELETE {org_Id}/{app_Id}/roles/{rolename|role_Id}/permissions?permission={grant_url_pattern}' "
      parameters:      
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/roleId"
        - name: grant_url_pattern
          in: query
          description: "the query statement of the url pattern"
          required: true
          type: string
      tags:
        - Permission Info
      responses:
        "200":
          description: "An array of deleted permission's info."
          schema:
            $ref: Permission Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/roles/{roleId}/users/{userId}":
    post:
      summary: "Add a user to a role"
      description: "Use the POST method to add a user to a role."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/roleId"
        - $ref: "#/parameters/userId-3"
      tags:
        - User Info
      responses:
        "200":
          description: "An array of added user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
    delete:
      summary: "Delete a user from a role"
      description: "Use the DELETE method to delete a user from a role."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/roleId"
        - $ref: "#/parameters/userId-3" 
      tags:
        - User Info
      responses:
        "200":
          description: "An array of deleted user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/roles/{roleId}/users":
    get:
      summary: "Get the users in a role"
      description: "Use the GET method to get the users in a role."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/roleId"
      tags:
        - User Info
      responses:
        "200":
          description: "An array of retrieved user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/users":
    post:
      summary: "Create a user in the users collection"
      description: "Use the POST method to create a user in the users collection."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - name: userproperty
          in: body
          description: "the properties of the user"
          required: true
          schema:
            $ref: User Property
      tags:
        - User Info
      responses:
        "200":
          description: "An array of created user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
    get:
      summary: "Query to get users"
      description: "Use the GET method to get users though query statement."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - name: queryStatement
          in: query
          description: "the query statement of the user info"
          required: true
          type: string
      tags:
        - User Info
      responses:
        "200":
          description: "An array of retrieved user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  "/{orgId}/{appId}/users/{user}/password":
    post:
      summary: "Set a user's password or reset the user's existing password"
      description: "Use the POST method to set a user's password or reset the user's existing password."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"  
        - name: username
          in: path
          description: "the username of the user."
          required: true
          type: string
        - name: ResetPW
          in: body
          description: "the user's old and new password"
          required: true
          schema:
            $ref: ResetPW    
      tags:
        - Action Response Info
      responses:
        "200":
          description: "An array of complete messages"
          schema:
            $ref: Action Response Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error   
  "/{orgId}/{appId}/users/{userId}":
    get:
      summary:  "Retrieve a user"
      description:  "Use the GET method to retrieve a user."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/userID-2" 
      tags:
        - User Info
      responses:
        "200":
          description: "An array of retrieved user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
    put:
      summary: "Update a user"
      description: "Use the PUT method to update a user."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/userID-3" 
      tags:
        - User Info
      responses:
        "200":
          description: "An array of updated user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error  
    delete:
      summary: "Delete a user"
      description: "Use the DELETE method to delete a user."
      parameters:    
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/userID-3" 
      tags:
        - User Info
      responses:
        "200":
          description: "An array of deleted user's info."
          schema:
            $ref: User Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  "/{orgId}/{appId}/users/{userId}/{relation}":
    get:
      summary: "Query a user's collections or connections"
      description: "Use the GET method to get a user's collections or connections through query statement."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/userID-3"      
        - name: relation
          in: path
          description:  "the relation between user and collections"
          required: true
          type: string
        - name: queryStatement
          in: query
          description:  "the query statement of the user info"
          required: true
          type: string
      tags:
        - Entity Info
      responses:
        "200":
          description: "An array of user's collections info."
          schema:
            $ref: Entity Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  "/{orgId}/{appId}/users/{userId}/feed":
    get:
      summary: "Get a user's feed"
      description: "Use the GET method to get a user's feed."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/userID-3"         
      tags:
        - Activity Feed
      responses:
        "200":
          description: "An array of user's activity feed."
          schema:
            $ref: Activity Feed
        default:
          description: "Unexpected error"
          schema:
            $ref: Error

  "/{orgId}/{appId}/devices/{deviceId}/notifications":
    post:
      summary: "Creating notifications for a single device"
      description: "Use the POST method to create notifications for a single device. This request will target a specific device entity."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/deviceId"
        - $ref: "#/parameters/notification"
        - $ref: "#/parameters/scheduleNotificaiton" 
        - $ref: "#/parameters/setExpiration"
      tags:
        - Notification Info
      responses:
        "200":
          description: "An array of created notification's info."
          schema:
            $ref: Notification Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  "/{orgId}/{appId}/devices/*/notifications":
    post:
      summary: "Creating notifications for all devices"
      description:  "Use the POST method to create notifications for all devices. This request will target all device entities."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/notification"
        - $ref: "#/parameters/scheduleNotificaiton" 
        - $ref: "#/parameters/setExpiration"
      tags:
        - Notification Info
      responses:
        "200":
          description: "An array of created notification's info."
          schema:
            $ref: Notification Info
        default:
          description:  "Unexpected error"
          schema:
            $ref: Error
  "/{orgId}/{appId}/users/{userId}/notifications":
    post:
      summary: "Creating notifications for a user"
      description: "Use the POST method to create notifications for a user. This request will target a specific user entity."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/userId-3" 
        - $ref: "#/parameters/notification"
        - $ref: "#/parameters/scheduleNotificaiton" 
        - $ref: "#/parameters/setExpiration"
      tags:
        - Notification Info
      responses:
        "200":
          description: "An array of created notification's info."
          schema:
            $ref: Notification Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error
  "/{orgId}/{appId}/groups/{path}/notifications":
    post:
      summary: "Creating notifications for a group"
      description: "Use the POST method to create notifications for a group. This request will target all users associated with a specific group entity."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - name: path
          in: path
          description:  "the path of the group"
          required: true
          type: string
        - $ref: "#/parameters/notification"
        - $ref: "#/parameters/scheduleNotificaiton" 
        - $ref: "#/parameters/setExpiration"
      tags:
        - Notification Info
      responses:
        "200":
          description: "An array of created notification's info."
          schema:
            $ref: Notification Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error           
  "/{orgId}/{appId}/devices":
    post:
      summary: "Creating notifications for user through targeting by location"
      description: "Use the POST method to create notifications for user through targeting by location."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/notification"
        - $ref: "#/parameters/scheduleNotificaiton" 
        - $ref: "#/parameters/setExpiration"
        - name: queryStatement
          in: query
          description: "the query statement of the location of the user"
          required: true
          type: string
      tags:
        - Notification Info
      responses:
        "200":
          description: "An array of created notification's info."
          schema:
            $ref: Notification Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error       
  "/{orgId}/{appId}/notifications":
    get:
      summary: "Getting one or more notifications"
      description: "Use the GET method to get one or more notifications."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"    
      tags:
        - Notification Info
      responses:
        "200":
          description: "An array of retrieved notification's info."
          schema:
            $ref: Notification Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error             
  "/{orgId}/{appId}/{receiptId}/*/notifications":
    get:
      summary: "Getting notifications associated with one or more receipts"
      description: "Use the GET method to get notifications associated with one or more receipts."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/receiptId" 
      tags:
        - Notification Info
      responses:
        "200":
          description: "An array of retrieved notification's info."
          schema:
            $ref: Notification Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/{notificationId}/*/queue":
    get:
      summary: "Getting the list of devices associated with one or more notifications before the notifications are sent"
      description: "Use the GET method to get the list of devices associated with one or more notifications before the notifications are sent."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/notificationId" 
      tags:
        - Device Info
      responses:
        "200":
          description: "An array of retrieved device's info."
          schema:
            $ref: Device Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/my-org/sandbox/notifications/{notificationId}":
    put:
      summary: "Canceling sent notifications"
      description: "Use the PUT method to cancel sent notifications"
      parameters:
        - $ref: "#/parameters/notificationId"
        - name: cancelMsg
          in: body
          description: "indicete whether is canceled or not"
          required: true
          schema:
            $ref: CancelMSG        
      tags:
        - Notification Info
      responses:
        "200":
          description: "An array of canceled notification's info."
          schema:
            $ref: Notification Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/notifications/{notificationId}":
    delete:
      summary: "Deleting unsent notifications"
      description: "Use the DELETE method to delete unsent notifications."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/notificationId"
      tags:
        - Notification Info
      responses:
        "200":
          description: "An array of deleted notification's info."
          schema:
            $ref: Notification Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error  
  "/{orgId}/{appId}/receipts":
    get:
      summary: "Getting one or more receipts"
      description: "Use the GET method to get one or more receipts"
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId"        
      tags:
        - Receipt Info
      responses:
        "200":
          description: "An array of retrieved receipt's info."
          schema:
            $ref: Receipt Info
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/{deviceId}/*/receipts":
    get:
      summary: "Getting receipts associated with one or more devices"
      description: "Use the method GET to get receipts associated with one or more devices."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/deviceId"
      tags:
        - Receipt Info
      responses:
        "200":
          description: "An array of retrieved receipt's info."
          schema:
            $ref: "#/definitions/Receipt Info"
        default:
          description: "Unexpected error"
          schema:
            $ref: Error 
  "/{orgId}/{appId}/{notificationId}/*/receipts":
    get:
      summary: "Get receipts for one or more notifications"
      description: "Use the GET method to get receipts for one or more notifications."
      parameters:
        - $ref: "#/parameters/orgId"
        - $ref: "#/parameters/appId" 
        - $ref: "#/parameters/notificationId"
      tags:
        - Receipt Info
      responses:
        "200":
          description: "An array of retrieved receipt's info."
          schema:
            $ref: "Receipt Info"
        default:
          description: "Unexpected error"
          schema:
            $ref: Error       

parameters:
  userId-1:
    name: userId-1
    in: path
    description: "one of the user's identification which includes username, real name, email address or uuID"
    required: true
    type: string
  userId-2:
    name: userId-2
    in: path
    description: "one of the user's identification which includes username, email address or uuID"
    required: true
    type: string
  userId-3:
    name: userId-3
    in: path
    description: "one of the user's identification which includes username or uuID"
    required: true
    type: string
  appId:
    name: appId
    in: path
    description: one of the application's identification which includes name or uuid.
    required: true
    type: string 
  orgId:
    name: orgId
    in: path
    description: one of the orgnization's identification which includes name or uuid.
    required: true
    type: string 
  groupId:
    name: groupId
    in: path
    description: one of the group's identification which includes name or uuid.
    required: true
    type: string 
  deviceId:
    name: deviceId
    in: path
    description: one of the device's identification which includes name or uuid.
    required: true
    type: string  
  notificationId:
    name: notificationId
    in: path
    description: one of the notification's identification which includes name or uuid.
    required: true
    type: string        
  receiptId:
    name: receiptId
    in: path
    description: one of the receipt's identification which includes name or uuid.
    required: true
    type: string 
  collectionId:
    name: collectionId
    in: path
    description: one of the collection's identification which includes name or uuid.
    required: true
    type: string 
  roleId:
    name: roleId
    in: path
    description: one of the role's identification which includes name or uuid.
    required: true
    type: string 
  entityId:
    name: entityId
    in: path
    description: one of the entity's identification which includes name or uuid.
    required: true
    type: string 
  notification:
    name: notification
    in: body
    description: "These parameters are used when forming the notification portion of the request."
    required: true
    schema:
    $ref: Notification Properties 
  scheduleNotification:  
    name: scheduleNotification
    in: body
    description: "To schedule a notification for a later time add the deliver parameter with a UNIX timestamp to the body of your request."
    required: false
    schema:
    $ref: Schedule Notification
  setExpiration: 
    name: setExpiration
    in: body
    description: "If a push service can't deliver a message to a device and needs to resend it you can set a notification to expire after a certain date/time."
    required: false
    schema:
    $ref: Set Expiration

definitions:
  CancelMSG:
    required:
      - canceled
    properties:
      canceled:
        type: boolean
  Receipt Info:
    properties:
      uuId:
        type: string
        description:  "unique entity Id"
      type:
        type: string
        description:  "type of entity  "
      created:
        type: number
        description:  "UTC timestamp in milliseconds of when the entity was created"
        format: int32
      modified:
        type: number
        description:  "UTC timestamp in milliseconds of when the entity was last modified"
        format: int32
      payloads:
        type: string
        description:  "the push notifications to be delivered  "
      errorMessage:
        type: string
        description:  "error message returned by the notification service (APNs or GCM) if the notification fails entirely"
      errorCode:
        type: string
        description:  "error code returned by the notification service"
      sent: 
        type: number
        description:  "UTC timestamp in milliseconds for when the notification was sent"
      metadata:
        schema:
          $ref: Metadata   
      completeMsg:
        schema:
          $ref: Action Response Info
  Device Info:
    properties:
      uuId:
        type: string
        description:  "unique entity Id"
      type:
        type: string
        description:  "type of entity"
      name: 
        type: string
        description:  "notifier display name"
      created:
        type: number
        description:  "UTC timestamp in milliseconds of when the entity was created"
        format: int32
      modified:
        type: number
        description:  "UTC timestamp in milliseconds of when the entity was last modified"
        format: int32
      metadata:
        schema:
          $ref: Metadata   
      completeMsg:
        schema:
          $ref: Action Response Info
  Schedule Notification:
    required:
      - timestamp
    properties:
      timestamp:
        type: number
        format: int32
  Set Expiration:
    required:
      - timestamp
    properties:
      timestamp:
        type: number
        format: int32
  Notification Info:
    required:
      - payloads
    properties:
      uuId:
        type: string
        description:  "Unique entity Id"
      type:
        type: string
        description:  "type of entity"
      created:
        type: number
        description:  "UTC timestamp in milliseconds of when the entity was created"
        format: int32
      modified:
        type: number
        description:  "UTC timestamp in milliseconds of when the entity was last modified"
        format: int32
      payloads:
        type: string
        description:  "the push notifications to be delivered  "
      errorMessage:
        type: string
        description:  "error message returned by the notification service (APNs or GCM) if the notification fails entirely"
      scheduled:
        type: boolean
        description:  "whether the notification is currently scheduled for delivery"
      state:
        type: string
        description:  "The current delivery status of the notification 'FINISHED', 'SCHEDULED' or 'CANCELED'"
      metadata:
        schema:
          $ref: Metadata 
      completeMsg:
        schema:
          $ref: Action Response Info
  Notifier Info:
    required:
      - provIder
      - environment
    properties:
      uuId:
        type: string
        description:  "unique entity Id"
      type:
        type: string
        description:  "type of entity"
      name: 
        type: string
        description:  "notifier display name"
      created:
        type: number
        description:  "UTC timestamp in milliseconds of when the entity was created"
        format: int32
      modified:
        type: number
        description:  "UTC timestamp in milliseconds of when the entity was last modified"
        format: int32
      provIder:
        type: string
        description:  "push notification provIder 'apple' or 'google'"
      environment:
        type: string
        description:  "the environment that corresponds to your app 'development' or 'production'"
      metadata:
        schema:
          $ref: Metadata
  Notification Properties:
    type: array
    items:
      $ref: Notification Property
  Notification Property:
    required:
      - notifier
      - message
    properties:
      notifier:
        schema:
          $ref: Notifier Info
      message:
        type: string
        description:  "the push notitfication message that will be delivered to the user"
  Permission Info:
    properties:
      applicationName: 
        type: string
        description:  "the name of the application of the permission"
      entity:
        schema:
          $ref: Entity
      url:
        type: string
        description:  "the url of the permission"
      applicationId:
        type: string
        description:  "the uuId of the application"
      parameters:
        type: string
        description:  "the parameters of the permission"
      orgnization:
        type: string
        description:  "the orgnization of the permission"
      permissiondata:
        schema:
          $ref: Permission Property
  Permission Property:
    required:
      - operation
      - resource_path
    properties:
      operation:
        type: string
        description:  "A comma-delimited set of HTTP methods (GET, PUT, POST, DELETE) that are allowed for the specified resource path."
      resource_path:
        type: string
        description:  "The path to the resources to be accessed."
  Role Info:
    properties:
      applicationName:
        type: string
        description:  "the application name of the event"
      count:
        type: number
        description:  "the numebr of the roles"
        format: int32
      entity:
        schema:
          $ref: Entity
      url:
        type: string
        description:  "the url of the event"
      applicationId:
        type: string
        description:  "the application uuId of the event"
      parameters:
        type: string
        description:  "the parameters of the event"
      orgnization:
        type: string
        description:  "the title of the orgnization"
      completeMsg:
        schema:
         $ref: Action Response Info    
      path:
        type: string  
        description:  "the path of the role"
  Role Property:
    required:
      - title
      - role name
    properties:
      title:
        type: string
        description:  "the title of the role"
      role name:
        type: string
        description:  "the name of the role"
  Event Info:
    properties:
      applicationName:
        type: string
        description:  "the application name of the event"
      entity:
        schema:
          $ref: Entity
      url:
        type: string
        description:  "the url of the event"
      applicationId:
        type: string
        description:  "the application uuId of the event"
      parameters:
        type: string
        description:  "the parameters of the event"
      orgnization:
        type: string
        description:  "the title of the orgnization"
      completeMsg:
        schema:
         $ref: Action Response Info
  Event Property:
    required:
      - timestamp
    properties:
      timestamp:
        type: number
        format : int32
  Group Info:
    properties:
      uuId:
        type: string
        description:  "the uuId of the group"
      type:
        type: string
        description:  "the type of the group"
      created:
        type: string
        description:  "the created Id for the group"
      modified:
        type: string
        description:  "the modified Id for the group"
      path:
        type: string
        description:  "the path of the group"
      metadata:
        schema:
          $ref: Metadata
      title:
        type: string
        description:  "the title of the group"
      completeMsg:
        schema:
          $ref: Action Response Info
  Group Property:
    required:
      - title
      - path
    properties:
      title: 
        type: string
        description:  "the title of the group"
      path:
        type: string
        description:  "the path of the group"
  Entity Properties:
    type: array
    items:
      $ref: Entity Property
  Entity Property:
    properties:
      property:
        type: string
        description:  "the entity property"
      value:
        type: string
        description:  "the relevant value of the property"
  Entity Info:
    properties:
      applicationId:
        type: string
        description:  "the application Id of the entity"
      parameters:
        type: string
        description:  "the parameters of the entity"
      path:
        type: string
        description:  "the path of the entity"
      url:
        type: string
        description:  "the url of the entity"
      entityproperty:
        schema:
          $ref: Entity
      orgnization:
        type: string
        description:  "the name of the orgnization"
      applicationName:
        type: string
        description:  "the name of the application"
      count:
        type: number
        description:  "the number of the entities retrieved"
        format: int32
      completeMsg:
        schema:
          $ref: Action Response Info
  Application Property:
    required:
      - token
      - name
    properties:
      token:
        type: string        
        description:  "The OAuth2 access token."
      name:
        type: string
        description:  "The name of the application."
  Credential Info:
    properties:
      client_Id:
        type: string
        description:  "the Id of the client"
      client_secret:
        type: string
        description:  "the secret of the client"
      completeMsg:
        schema:
          $ref: Action Response Info
  orgnization Info:
    properties:
      applicationId:
        type: string
        description:  "the application Id of the owner"
      username:
        type: string
        description:  "the username of the owner"
      name:
        type: string
        description:  "the name of the owner"
      email:
        type: string
        description:  "the email of the owner"
      activated:
        type: boolean
        description:  "indicate whether the account is activated or not"
      disabled:
        type: boolean
        description:  "indicate whether the account is disabled or not"
      uuId:
        type: string
        description:  "the uuId of the owner"
      adminUser:
        type: boolean
        description:  "indicate whether the use is a adminUser or not"
      displayEmailAddress:
        type: string
        description:  "the display of the email of the owner"
      htmldisplayEmailAddress:
        type: string
        description:  "the HTML display of the email of the owner"
      orgname:
        type: string
        description:  "the name of the orgnization"
      orguuId: 
        type: string
        description:  "the uuId of the orgnization"
      applicationdata:
        schema:
          $ref: Application Data
      completeMsg:
        schema:
          $ref: Action Response Info
  Application Data:
    properties:
      tester/sandbox: 
        type: string
        description:  "the uuId of tester/sandbox"
      tester/app1:
        type: string
        description:  "the uuId of tester/app1"
      tester/app2:
        type: string
        description:  "the uuId of tester/app2"
      completeMsg:
        schema:
          $ref: Action Response Info
  orgnization Property:
    required:
      - orgnization
      - username
      - name
      - email
      - password
    properties:
      orgnization:
        type: string
      username:
        type: string
      name:
        type: string
      email:
        type: string
      password:
        type: string
  Activity Property:
    required:
      - displayName
      - uuId
      - username
      - verb
      - content
    properties:
      displayName:
        type: string
      uuId:
        type: string
      username:
        type: string
      image:
        schema:
          $ref: ImageModel
      verb:
        type: string
      content:
        type: string
  ImageModel:
    properties:
      duration:
        type: number
        format: int32
      height:
        type: number
        format: int32
      url:
        type: string
      wIdth:
        type: integer
        format: int32
      email:
        type: string
  ResetPW Complete Msg:
    required:
      - recaptcha_response_field
      - recaptcha_challenge_field
      - email
    properties:
      recaptcha_response_field:
        type: string
      recaptcha_challenge_field:
        type: string
      email:
        type: string
  ResetPW:
    required:
      - password
      - newpassword
    properties:
      password:
        type: string
      newpassword:
        type: string
  AdminUserUpdate:
    properties:
      city: 
        type: string
      state:
        type: string
  Admin User Property:
    required:
      - username
    properties:
      username:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
  User Property:
    required:
      - username
    properties:
      username:
        type: string
  User Info:
    properties:
      applicationId:
        type: string
        description:  "the application Id of a user"
      username:
        type: string
        description:  "the username of a user"
      name:
        type: string
        description:  "the name of a user"
      email:
        type: string
        description:  "the email of a user"
      activated:
        type: boolean
        description:  "indicate whether the account is activated or not"
      disabled:
        type: boolean
        description:  "indicate whether the account is disabled or not"
      uuId:
        type: string
        description:  "the uuId of a user"
      adminUser:
        type: boolean
        description:  "indicate whether the use is a adminUser or not"
      displayEmailAddress:
        type: string
        description:  "the display of the email of a user "
      htmldisplayEmailAddress:
        type: string
        description:  "the HTML display of the email of a user"
      orgnization:
        type: string
        description:  "the orgnization of the user"
      picture:
        type: string
        description:  "the uri of the user's picture"
      uri:
        type: string
        description:  "the uri of the user"
      path:
        type: string
        description:  "the path of the user"
      completeMsg:
        schema:
          $ref: Action Response Info
  Action Response Info:
    properties:
      action:
        type: string
        description:  "the requested action"
      status:
        type: string
        description:  "the status of the requested action"
      timestamp:
        type: numebr
        description:  "the timestamp of the requested action"
        format: int32
      duration:
        type: number
        description:  "the duration of the requested action"
        format: int32
      token:
        type: string 
        description:  "the token required for getting an AdminUser "
  Activity Feed:
    properties:
      entityproperty:
        schema:
          $ref: Entity
      category:
        type: string
        description:  "the category of the activity"
      metadataproperty:
        schema:
          $ref: Metadata
      objectproperty:
        schema:
          $ref: Object
      title:
        type: string
        description:  "the title of the activity"
      verb:
        type: string
        description:  "the verb of the activity"
      published:
        type: number
        description:  "the published Id of the activity"
        format: int32
      verb:
        type: string
        description:  "the verb of the activity"
      completeMsg:
        schema:
          $ref: Action Response Info
  Object:
    properties:
      displayname:
        type: string
        description:  "the display of the name of the object"
      objecttype:
        type: string
        description:  "the type of the object"
      objectuuId:
        type: string
        description:  "the uuId of the object"
      entitytype:
        type: string
        description:  "the entitytype of the object     "
  Metadata:
    properties:
      cursor:
        type: string
        description:  "the cursor of the metadata"
      path:
        type: string
        description:  "the path of the metadata "
      sets:
        schema:
          $ref: Sets    
      collections:
        schema:
          $ref: Collections
  Collections:
    properties:
      activities:
        type: string
      feed:
        type: string
      roles:
        type: string
      users:
        type: string 
  Sets:
    properties:
      rolenames:
        type: string
      permissions:
        type: string
  Actor:
    properties:
      displayname:
        type: string
        description:  "the display of the name of the actor"
      objecttype:
        type: string
        description:  "the type of the actor"
      objectuuId:
        type: string
        description:  "the uuId of the actor"
      entitytype:
        type: string
        description:  "the entitytype of the actor"
  Entity:
    properties:
      uuId:
        type: string
        description:  "the uuId of the entity"
      type:
        type: string
        description:  "the type of the entity"
      created:
        type: number
        description:  "the Id of the created one"
        format: int32
      modified:
        type: number
        description:  "the Id of the modified one"
        format: int32
      actorproperty:
        schema:
          $ref: Actor
      metadata:
        schema:
          $ref: Metadata
      name:
        type: string
        description:  "the name of the entity"
      price:
        type: number
        description:  "the price of the entity"
        format: int32
      timestamp:
        type: number
        format: int32
      message:
        type: string
  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: object